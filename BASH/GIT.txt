git add .
git status
git commit -m 'Modyfikacja konfiguracja.txt'
git push origin master

---------
GIT SYNC z masterem
---------
git checkout master
git pull
git push origin master - nie potrzebne, bardziej kontrolnie


Git global setup
-----------------

git config --global user.name "Przemysław Kuźnicki"
git config --global user.email "przemyslaw.kuznicki@linuxpolska.pl"

Create a new repository
-----------------------

git clone https://gitlab.com/przemyslaw.kuznicki/cicd-tasks-app.git
cd cicd-tasks-app
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Push an existing folder
-----------------------

cd existing_folder
git init
[ git remote remove origin ]
git remote add origin https://gitlab.com/przemyslaw.kuznicki/cicd-tasks-app.git
git add .
git commit -m "Initial commit"
git push -u origin master

Push an existing Git repository
--------------------------------

cd existing_repo
git remote rename origin old-origin
git remote add origin https://gitlab.com/przemyslaw.kuznicki/cicd-tasks-app.git
git push -u origin --all
git push -u origin --tags

REPO i wszystkie BRANCHES
-------------------------
git clone https://github.com/OpenShiftDemos/openshift-tasks.git
cd openshift-tasks/
git fetch origin
git branch -a
git checkout -b eap-7 origin/eap-7
git init
git remote remove origin
git remote add origin https://gitlab.com/przemyslaw.kuznicki/cicd-tasks-app.git
git commit -m "Initial commit"
git push --all origin

Deploy TOKEN
------------
W projekcie -> settings->repository wybieramy Deploy Toekn i wypelniamy formatke

Deploy tokens allow access to packages, your repository, and registry images.
Your New Deploy Token
Use this username as a login: przemyslaw.kuznicki (gitLAB)
Use this token as a password: Z$%^#&???XXXX <- token w KeePass

Allows read-only access to the registry images,
Allows read access to the package registry

Migracja repo pomiedzy GitLAB < -- > GitHUB
------------------------------------
if you share the same idea and look for a simple way to migrate a repo from Bitbucket or GitLab, the followings are several simple steps to accomplish this.

1) Inside your GitHub team page, create an empty private repo with the same name of Bitbucket/GitLab repo that you want to transfer.
2) Copy your newly created repo link, either in HTTPS or SSH. For example, git@github.com:team-name/repo-name.git (SSH type)
3) Inside your local project folder, change the remote URL under.git/config ‘s file to your copied GitHub's one. The content looks similar as follows. [remote "origin"]
    url = git@github.com:team-name/repo-name.git
    fetch = +refs/heads/*:refs/remotes/origin/*
4) Do a git push: git push --all . It will push all codes and commit history on your newly GitHub repository.
5) Done. After that, when we push new commits, it will push to GitHub only.
6) The Bitbucket/GitLab repo now can be archived to ‘Read-only’ mode.

==========
…or create a new repository on the command line

echo "# vmware-ocp" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/kprzemek/vmware-ocp.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin https://github.com/kprzemek/vmware-ocp.git
git branch -M main
git push -u origin main
